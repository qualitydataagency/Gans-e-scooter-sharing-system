#import python modules 

import pandas as pd
from datetime import datetime, date, timedelta
import requests
from pytz import timezone

### User defined inputs ### "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

API_KEY = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Get today's date in Berlin timezone
today = datetime.now().astimezone(timezone('Europe/Berlin')).date()
# Calculate tomorrow's date
tomorrow = (today + timedelta(days=1))
# Define time window
time = ["00:00","11:59"]
# if more than 12h than you will see this error message: {'message': 'The duration of the requested period of time must be positive and must not be more than 12 hours in duration'}

# Define icao of Berlin
icao = "EDDB"

# API url
url = f"https://aerodatabox.p.rapidapi.com/flights/airports/icao/{icao}/{tomorrow}T{time[0]}/{tomorrow}T{time[1]}"

# API headers
headers = {
	"X-RapidAPI-Key": API_KEY,
	"X-RapidAPI-Host": "aerodatabox.p.rapidapi.com"
}
# API parameter
querystring = {"withLeg":"true","direction":"Arrival","withCancelled":"false","withCodeshared":"true","withCargo":"false","withPrivate":"false"}

# API call
response = requests.request("GET", url, headers=headers, params=querystring)

# Parse the JSON response
flights_json = response.json()
print(flights_json)

def get_tomorrows_flight_arrivals(icao_list):
  # Get today's date in Berlin timezone
  today = datetime.now().astimezone(timezone('Europe/Berlin')).date()
  # Calculate tomorrow's date
  tomorrow = (today + timedelta(days=1))

  # Initialize an empty list to store flight data
  list_for_df = []

  # Loop over each ICAO code in the input list
  for icao in icao_list:
    # Define the two time periods for which to fetch data
    times = [["00:00","11:59"],["12:00","23:59"]]

    # Loop over each time period
    for time in times:
      # Construct the URL for the API request
      url = f"https://aerodatabox.p.rapidapi.com/flights/airports/icao/{icao}/{tomorrow}T{time[0]}/{tomorrow}T{time[1]}"
      # Define the query parameters for the API request
      querystring = {"withLeg":"true","direction":"Arrival","withCancelled":"false","withCodeshared":"true","withCargo":"false","withPrivate":"false"}
      # Define the headers for the API request
      headers = {
          'x-rapidapi-host': "aerodatabox.p.rapidapi.com",
          'x-rapidapi-key': API_KEY


          }
      # Make the API request
      response = requests.request("GET", url, headers=headers, params=querystring)
      print(response)
      # Parse the JSON response
      flights_json = response.json()

      # Loop over each flight in the response
      for flight in flights_json['arrivals']:
        # Initialize an empty dictionary to store flight data
        flights_dict = {}
        # Store the ICAO code and flight data in the dictionary
        flights_dict['arrival_icao'] = icao
        # Use the .get() method to avoid KeyError if a key doesn't exist in the dictionary
        flights_dict['arrival_time_local'] = flight['arrival'].get('scheduledTimeLocal', None)
        flights_dict['arrival_terminal'] = flight['arrival'].get('terminal', None)
        flights_dict['departure_city'] = flight['departure']['airport'].get('name', None)
        flights_dict['departure_icao'] = flight['departure']['airport'].get('icao', None)
        flights_dict['departure_time_local'] = flight['departure'].get('scheduledTimeLocal', None)
        flights_dict['airline'] = flight['airline'].get('name', None)
        flights_dict['flight_number'] = flight.get('number', None)
        # Store the current date in Berlin timezone
        flights_dict['data_retrieved_on'] = datetime.now().astimezone(timezone('Europe/Berlin')).date()
        # Append the flight dictionary to the list
        list_for_df.append(flights_dict)

  # Convert the list of flight dictionaries to a DataFrame and return it
  return pd.DataFrame(list_for_df)

### User defined inputs ###

icaos = ['EDDB', 'EGLL']
get_tomorrows_flight_arrivals(icaos)

#SQLAlchemy

import sqlalchemy

!pip install pymysql

schema="gans_data_base" # renamed from "iss_workshop"
host="0.0.0.1"
user="root"
password="xxxxx"
port=xxxxx
con = f'mysql+pymysql://{user}:{password}@{host}:{port}/{schema}'

flights_data_frame = get_tomorrows_flight_arrivals(icaos)

flights_data_frame

# Iterate through the list of departure city, create city_id and create unique integer for each city

flights_data_frame['city_id'] = flights_data_frame['departure_city'].factorize()[0] + 1

flights_data_frame

flights_data_frame.to_sql('flights_1', con=con, if_exists='append', index=False)

#GANS CITIES

#Create cities data frame

cities = flights_data_frame[["city_id", "departure_city", "airline"]]

cities

####Rename one coloumn name in country code

cities = cities.rename(columns={'airline': 'country_code'})

##Create empty coloumn country code

cities['country_code'] = ''

cities

cities.to_sql('cities_1', con=con, if_exists='append', index=False)
